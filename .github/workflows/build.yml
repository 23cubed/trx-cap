name: Build and Deploy Bundle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build bundle
      run: npm run build
    
    - name: List dist directory
      run: ls -la dist/
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        echo "Git status:"
        git status --porcelain
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Changes detected, will commit and push"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected, skipping commit"
        fi
    
    - name: Get current version and increment
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      id: version
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Extract version parts
        IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Update package.json version
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$NEW_VERSION';
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add dist/ src/js/main.js package.json
        echo "Files to be committed:"
        git diff --cached --name-only
        if git diff --cached --quiet; then
          echo "No changes to commit after staging"
          exit 0
        fi
        git commit -m "Auto-build: Update bundle and imports to v${{ steps.version.outputs.version }} [skip ci]"
        git push origin main
    
    - name: Create and push Git tag
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        echo "🏷️  Creating Git tag ${{ steps.version.outputs.tag }}"
        git tag ${{ steps.version.outputs.tag }}
        git push origin ${{ steps.version.outputs.tag }}
        echo "✅ Git tag created and pushed successfully"
    
    - name: Purge jsDelivr CDN cache
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        echo "🔄 Purging jsDelivr CDN cache for multiple endpoints..."
        
        # Purge @main branch files
        echo "Purging @main branch..."
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@main/dist/main.js"
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@main/dist/main.js.map" || true
        
        # Purge specific version files
        echo "Purging version ${{ steps.version.outputs.tag }}..."
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@${{ steps.version.outputs.tag }}/dist/main.js"
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@${{ steps.version.outputs.tag }}/dist/main.js.map" || true
        
        # Purge @latest alias
        echo "Purging @latest alias..."
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@latest/dist/main.js"
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@latest/dist/main.js.map" || true
        
        echo "✅ CDN cache purged successfully!"
        echo "🚀 Latest changes should be available immediately"
        echo ""
        echo "📋 Available CDN URLs:"
        echo "🔗 Latest: https://cdn.jsdelivr.net/gh/23cubed/trx-cap@latest/dist/main.js"
        echo "🔗 Main: https://cdn.jsdelivr.net/gh/23cubed/trx-cap@main/dist/main.js"
        echo "🔗 Version: https://cdn.jsdelivr.net/gh/23cubed/trx-cap@${{ steps.version.outputs.tag }}/dist/main.js" 