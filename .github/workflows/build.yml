name: Build and Deploy Bundle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build bundle
      run: npm run build
    
    - name: List dist directory
      run: ls -la dist/
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        echo "Git status:"
        git status --porcelain
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Changes detected, will commit and push"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected, skipping commit"
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add dist/ src/js/main.js
        echo "Files to be committed:"
        git diff --cached --name-only
        if git diff --cached --quiet; then
          echo "No changes to commit after staging"
          exit 0
        fi
        git commit -m "Auto-build: Update bundle and imports [skip ci]"
        git push origin main 
    
    - name: Auto-increment version and create release
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      id: create-release
      run: |
        # Fetch all tags and releases
        git fetch --tags
        
        # Get the latest tag or default to v1.0.0
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers (remove 'v' prefix)
        VERSION=${LATEST_TAG#v}
        
        # Split version into components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "Creating new version: $NEW_VERSION"
        
        # Create and push tag
        git tag "$NEW_VERSION"
        git push origin "$NEW_VERSION"
        
        # Create GitHub release
        gh release create "$NEW_VERSION" \
          --title "Release $NEW_VERSION" \
          --notes "Auto-generated release for version $NEW_VERSION

        **Changes:**
        - Updated JavaScript bundle
        - Auto-generated imports
        - Build timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        **CDN URL:**
        \`\`\`html
        <script src=\"https://cdn.jsdelivr.net/gh/23cubed/trx-cap@$NEW_VERSION/dist/main.js\"></script>
        \`\`\`
        
        **Latest CDN URL:**
        \`\`\`html
        <script src=\"https://cdn.jsdelivr.net/gh/23cubed/trx-cap@latest/dist/main.js\"></script>
        \`\`\`" \
          --latest
        
        echo "âœ… Successfully created release: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Purge jsDelivr CDN cache
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        NEW_VERSION="${{ steps.create-release.outputs.new_version }}"
        
        echo "ðŸ”„ Purging jsDelivr CDN cache for new version..."
        
        # Purge the new version
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@$NEW_VERSION/dist/main.js"
        
        # Purge @latest to force immediate update
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@latest/dist/main.js"
        
        # Also purge main.js.map if it exists
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@$NEW_VERSION/dist/main.js.map" || true
        curl -v "https://purge.jsdelivr.net/gh/23cubed/trx-cap@latest/dist/main.js.map" || true
        
        echo "âœ… CDN cache purged successfully!"
        echo "ðŸš€ New version $NEW_VERSION should be available immediately"
        echo "ðŸ”— Test URLs:"
        echo "   - https://cdn.jsdelivr.net/gh/23cubed/trx-cap@$NEW_VERSION/dist/main.js"
        echo "   - https://cdn.jsdelivr.net/gh/23cubed/trx-cap@latest/dist/main.js" 